version: 2.1

### It's a good practice to keep your commands at the top of the config file. In this project, you'll need at least 2 commands:

commands:
  deploy-stack:
    parameters:
      stack_name:
        default: "null"
        type: string
    steps:
      - run:
          name: Deploy infrastructure
          command: |
            aws cloudformation deploy \
              --template-file ".circleci/files/<<parameters.stack_name>>.yml" \
              --stack-name "udapeople-<<parameters.stack_name>>-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople
            aws cloudformation wait stack-create-complete --stack-name "udapeople-<<parameters.stack_name>>-${CIRCLE_WORKFLOW_ID}"

  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      stack_id:
        default: "null"
        type: string
    steps:
      - run:
          name: Clear backend infrastructure
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.stack_id>>"
          when: on_fail
      - run:
          name: Clear frontend infrastructure
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.stack_id>>"
          when: on_fail
      - run:
          name: Clear cdn infrastructure
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-cloudfront-<<parameters.stack_id>>"
          when: on_fail

#   revert-migration:
#     description: Revert the last migration if successfully run in the current workflow.
#     ...
orbs:
  slack: circleci/slack@3.4.2

jobs:
  build-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  build-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend
            - .circleci
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  test-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm test
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  test-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm test
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  scan-frontend:
    docker:
      - image: cimg/node:12.16
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Scan vulnerabilities frontend
          command: |
            cd frontend
            npm audit fix
            npm audit --audit-level=critical --force
      - persist_to_workspace:
          root: .
          paths:
            - frontend
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  scan-backend:
    docker:
      - image: cimg/node:12.16
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Scan vulnerabilities backend
          command: |
            cd backend
            npm audit fix
            npm audit --audit-level=critical --force
      - persist_to_workspace:
          root: .
          paths:
            - backend
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - deploy-stack:
          stack_name: backend
      - run:
          name: Register backend infrastructure
          command: |
            BACKEND_URL=$(aws cloudformation describe-stacks \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --region us-east-1 \
              --query "Stacks[0].Outputs[0].OutputValue" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 095cef7a-185c-43c6-aa1c-a479edebe4e7" \
              --request PUT 
              --data "${BACKEND_URL}" \
              "https://api.memstash.io/values/backendurl"
      # curl -H "token: 095cef7a-185c-43c6-aa1c-a479edebe4e7" --request GET https://api.memstash.io/values/backendurl
      - deploy-stack:
          stack_name: frontend
      - destroy-environment:
          stack_id: ${CIRCLE_WORKFLOW_ID}
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  configure-infrastructure:
    docker:
      - image: "tomonorimatsumura/ubuntu18-ansible:apt"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "91:d6:ae:8b:2b:8a:8a:1a:8c:b6:01:fd:81:70:a8:7d"
      - run:
          name: Run ansible playbook
          command: |
            BACKEND_URL=$(curl -H "token: 095cef7a-185c-43c6-aa1c-a479edebe4e7" \
              --request GET https://api.memstash.io/values/backendurl)
            cd ./.circleci/ansible/configure-server
            echo [web] > inventory.txt
            echo $BACKEND_URL >> inventory.txt
            ansible-playbook main.yml --private-key ~/.ssh/id_rsa"
      - destroy-environment:
          stack_id: ${CIRCLE_WORKFLOW_ID}
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  run-migrations:
    docker:
      - image: cimg/node:12.16
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Install tar utility
          command: yum install -y tar
      - attach_workspace:
          at: .
      - run:
          name: Deploy code to s3
          command: |
            API_URL=$(curl -H "token: 095cef7a-185c-43c6-aa1c-a479edebe4e7" \
              --request GET https://api.memstash.io/values/backendurl)
            cd ./frontend
            aws s3 sync ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID}"

      - destroy-environment:
          stack_id: ${CIRCLE_WORKFLOW_ID}
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  deploy-backend:
    docker:
      - image: "tomonorimatsumura/ubuntu18-ansible:apt"
    steps:
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "91:d6:ae:8b:2b:8a:8a:1a:8c:b6:01:fd:81:70:a8:7d"
      - run:
          name: Run ansible playbook
          command: |
            BACKEND_URL=$(curl -H "token: 095cef7a-185c-43c6-aa1c-a479edebe4e7" \
              --request GET https://api.memstash.io/values/backendurl)
            cp ./backend/dist/server.js ./ansible/deploy-code/roles/deploy-code/files/server.js
            cd ./.circleci/ansible/deploy
            echo [web] > inventory.txt
            echo $BACKEND_URL >> inventory.txt
            ansible-playbook main.yml --private-key ~/.ssh/id_rsa"
      - destroy-environment:
          stack_id: ${CIRCLE_WORKFLOW_ID}
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Smoke test backend
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            curl "http://${BACKEND_IP}:3030/api/status"

      - run:
          name: Smoke test frontend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"            
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi

      - destroy-environment:
          stack_id: ${CIRCLE_WORKFLOW_ID}
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Update cloudfront with new bucket
          command: |
            aws cloudformation update \
              --template-file ".circleci/files/cloudfront.yml" \
              --stack-name "udapeople-cdn" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople

      - destroy-environment:
          stack_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          stack_id: '$(curl -H "token: 095cef7a-185c-43c6-aa1c-a479edebe4e7" --request GET https://api.memstash.io/values/previousworkflow)'
      - run:
          name: Register old environment
          command: |
            curl -H "Content-Type: text/plain" -H "token: 095cef7a-185c-43c6-aa1c-a479edebe4e7" \
              --request PUT 
              --data "${CIRCLE_WORKFLOW_ID}" \
              "https://api.memstash.io/values/previousworkflow"
      - slack/status:
          fail_only: true
          only_for_branches: master
          webhook: "${SLACK_WEBHOOK}"

workflows:
  version: 2
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-backend
            - scan-frontend
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
